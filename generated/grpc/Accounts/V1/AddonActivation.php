<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: accounts/v1/addons.proto

namespace Accounts\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * AddonActivation is a representation of a addon activation in the Vendasta platform.
 * An activation exists in two states, an "active" state where it is available to
 * the purchaser, or a "deactivated" state where it's deactivated time is in the past.
 * Once an addon is deactivated, it is immutable moving forward.
 * </pre>
 *
 * Protobuf type <code>accounts.v1.AddonActivation</code>
 */
class AddonActivation extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * A prerequisite ID representing the customer/business.
     * </pre>
     *
     * <code>string business_id = 1;</code>
     */
    private $business_id = '';
    /**
     * <pre>
     * A prerequisite marketplace vendor's ID's of the app the addons belong to.
     * </pre>
     *
     * <code>string app_id = 2;</code>
     */
    private $app_id = '';
    /**
     * <pre>
     * A prerequisite marketplace vendor's ID's of the addon activated.
     * </pre>
     *
     * <code>string addon_id = 3;</code>
     */
    private $addon_id = '';
    /**
     * <pre>
     * An ID assigned uniquely to this addon upon being activated.
     * </pre>
     *
     * <code>string activation_id = 4;</code>
     */
    private $activation_id = '';
    /**
     * <pre>
     * UTC time the addon was activated.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp activated = 5;</code>
     */
    private $activated = null;
    /**
     * <pre>
     * UTC time the addon was or will be deactivated, if ever.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp deactivated = 6;</code>
     */
    private $deactivated = null;
    /**
     * <pre>
     * The order form submission id, unique per activation.
     * </pre>
     *
     * <code>string order_form_submission_id = 7;</code>
     */
    private $order_form_submission_id = '';
    /**
     * <pre>
     * Metadata and source for the activation event
     * </pre>
     *
     * <code>.accounts.v1.Blame activation_info = 8;</code>
     */
    private $activation_info = null;
    /**
     * <pre>
     * Metadata and source for the deactivation event
     * </pre>
     *
     * <code>.accounts.v1.Blame deactivation_info = 9;</code>
     */
    private $deactivation_info = null;
    /**
     * <pre>
     * The coming anniversary date for billing, also the date that users are going to have access until before cancelling the addon
     * This date can be obtained by using the ListAccountDates endpoint
     * </pre>
     *
     * <code>.google.protobuf.Timestamp anniversary_date = 14 [deprecated = true];</code>
     */
    private $anniversary_date = null;
    /**
     * <pre>
     * The state of activation to determine if the addon is active or cancelled
     * </pre>
     *
     * <code>.accounts.v1.AddonActivation.AddonActivationStatus status = 15;</code>
     */
    private $status = 0;
    /**
     * <pre>
     * The coming commitment date for billing, this is compute by the billing frequency and the commitment setup by vendor
     * This date can be obtained by using the ListAccountDates endpoint
     * </pre>
     *
     * <code>.google.protobuf.Timestamp commitment_date = 16 [deprecated = true];</code>
     */
    private $commitment_date = null;
    /**
     * <pre>
     * The orderID in billing system associated with an AddonActivation, which is generated by accounts microservice
     * </pre>
     *
     * <code>string billing_order_id = 17;</code>
     */
    private $billing_order_id = '';
    /**
     * <pre>
     * Activation descriptor is displayed in UI to differentiate multiple activations of the same addon
     * </pre>
     *
     * <code>string activation_descriptor = 18;</code>
     */
    private $activation_descriptor = '';

    public function __construct() {
        \GPBMetadata\Accounts\V1\Addons::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * A prerequisite ID representing the customer/business.
     * </pre>
     *
     * <code>string business_id = 1;</code>
     */
    public function getBusinessId()
    {
        return $this->business_id;
    }

    /**
     * <pre>
     * A prerequisite ID representing the customer/business.
     * </pre>
     *
     * <code>string business_id = 1;</code>
     */
    public function setBusinessId($var)
    {
        GPBUtil::checkString($var, True);
        $this->business_id = $var;
    }

    /**
     * <pre>
     * A prerequisite marketplace vendor's ID's of the app the addons belong to.
     * </pre>
     *
     * <code>string app_id = 2;</code>
     */
    public function getAppId()
    {
        return $this->app_id;
    }

    /**
     * <pre>
     * A prerequisite marketplace vendor's ID's of the app the addons belong to.
     * </pre>
     *
     * <code>string app_id = 2;</code>
     */
    public function setAppId($var)
    {
        GPBUtil::checkString($var, True);
        $this->app_id = $var;
    }

    /**
     * <pre>
     * A prerequisite marketplace vendor's ID's of the addon activated.
     * </pre>
     *
     * <code>string addon_id = 3;</code>
     */
    public function getAddonId()
    {
        return $this->addon_id;
    }

    /**
     * <pre>
     * A prerequisite marketplace vendor's ID's of the addon activated.
     * </pre>
     *
     * <code>string addon_id = 3;</code>
     */
    public function setAddonId($var)
    {
        GPBUtil::checkString($var, True);
        $this->addon_id = $var;
    }

    /**
     * <pre>
     * An ID assigned uniquely to this addon upon being activated.
     * </pre>
     *
     * <code>string activation_id = 4;</code>
     */
    public function getActivationId()
    {
        return $this->activation_id;
    }

    /**
     * <pre>
     * An ID assigned uniquely to this addon upon being activated.
     * </pre>
     *
     * <code>string activation_id = 4;</code>
     */
    public function setActivationId($var)
    {
        GPBUtil::checkString($var, True);
        $this->activation_id = $var;
    }

    /**
     * <pre>
     * UTC time the addon was activated.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp activated = 5;</code>
     */
    public function getActivated()
    {
        return $this->activated;
    }

    /**
     * <pre>
     * UTC time the addon was activated.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp activated = 5;</code>
     */
    public function setActivated(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->activated = $var;
    }

    /**
     * <pre>
     * UTC time the addon was or will be deactivated, if ever.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp deactivated = 6;</code>
     */
    public function getDeactivated()
    {
        return $this->deactivated;
    }

    /**
     * <pre>
     * UTC time the addon was or will be deactivated, if ever.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp deactivated = 6;</code>
     */
    public function setDeactivated(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->deactivated = $var;
    }

    /**
     * <pre>
     * The order form submission id, unique per activation.
     * </pre>
     *
     * <code>string order_form_submission_id = 7;</code>
     */
    public function getOrderFormSubmissionId()
    {
        return $this->order_form_submission_id;
    }

    /**
     * <pre>
     * The order form submission id, unique per activation.
     * </pre>
     *
     * <code>string order_form_submission_id = 7;</code>
     */
    public function setOrderFormSubmissionId($var)
    {
        GPBUtil::checkString($var, True);
        $this->order_form_submission_id = $var;
    }

    /**
     * <pre>
     * Metadata and source for the activation event
     * </pre>
     *
     * <code>.accounts.v1.Blame activation_info = 8;</code>
     */
    public function getActivationInfo()
    {
        return $this->activation_info;
    }

    /**
     * <pre>
     * Metadata and source for the activation event
     * </pre>
     *
     * <code>.accounts.v1.Blame activation_info = 8;</code>
     */
    public function setActivationInfo(&$var)
    {
        GPBUtil::checkMessage($var, \Accounts\V1\Blame::class);
        $this->activation_info = $var;
    }

    /**
     * <pre>
     * Metadata and source for the deactivation event
     * </pre>
     *
     * <code>.accounts.v1.Blame deactivation_info = 9;</code>
     */
    public function getDeactivationInfo()
    {
        return $this->deactivation_info;
    }

    /**
     * <pre>
     * Metadata and source for the deactivation event
     * </pre>
     *
     * <code>.accounts.v1.Blame deactivation_info = 9;</code>
     */
    public function setDeactivationInfo(&$var)
    {
        GPBUtil::checkMessage($var, \Accounts\V1\Blame::class);
        $this->deactivation_info = $var;
    }

    /**
     * <pre>
     * The coming anniversary date for billing, also the date that users are going to have access until before cancelling the addon
     * This date can be obtained by using the ListAccountDates endpoint
     * </pre>
     *
     * <code>.google.protobuf.Timestamp anniversary_date = 14 [deprecated = true];</code>
     */
    public function getAnniversaryDate()
    {
        return $this->anniversary_date;
    }

    /**
     * <pre>
     * The coming anniversary date for billing, also the date that users are going to have access until before cancelling the addon
     * This date can be obtained by using the ListAccountDates endpoint
     * </pre>
     *
     * <code>.google.protobuf.Timestamp anniversary_date = 14 [deprecated = true];</code>
     */
    public function setAnniversaryDate(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->anniversary_date = $var;
    }

    /**
     * <pre>
     * The state of activation to determine if the addon is active or cancelled
     * </pre>
     *
     * <code>.accounts.v1.AddonActivation.AddonActivationStatus status = 15;</code>
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * <pre>
     * The state of activation to determine if the addon is active or cancelled
     * </pre>
     *
     * <code>.accounts.v1.AddonActivation.AddonActivationStatus status = 15;</code>
     */
    public function setStatus($var)
    {
        GPBUtil::checkEnum($var, \Accounts\V1\AddonActivation_AddonActivationStatus::class);
        $this->status = $var;
    }

    /**
     * <pre>
     * The coming commitment date for billing, this is compute by the billing frequency and the commitment setup by vendor
     * This date can be obtained by using the ListAccountDates endpoint
     * </pre>
     *
     * <code>.google.protobuf.Timestamp commitment_date = 16 [deprecated = true];</code>
     */
    public function getCommitmentDate()
    {
        return $this->commitment_date;
    }

    /**
     * <pre>
     * The coming commitment date for billing, this is compute by the billing frequency and the commitment setup by vendor
     * This date can be obtained by using the ListAccountDates endpoint
     * </pre>
     *
     * <code>.google.protobuf.Timestamp commitment_date = 16 [deprecated = true];</code>
     */
    public function setCommitmentDate(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->commitment_date = $var;
    }

    /**
     * <pre>
     * The orderID in billing system associated with an AddonActivation, which is generated by accounts microservice
     * </pre>
     *
     * <code>string billing_order_id = 17;</code>
     */
    public function getBillingOrderId()
    {
        return $this->billing_order_id;
    }

    /**
     * <pre>
     * The orderID in billing system associated with an AddonActivation, which is generated by accounts microservice
     * </pre>
     *
     * <code>string billing_order_id = 17;</code>
     */
    public function setBillingOrderId($var)
    {
        GPBUtil::checkString($var, True);
        $this->billing_order_id = $var;
    }

    /**
     * <pre>
     * Activation descriptor is displayed in UI to differentiate multiple activations of the same addon
     * </pre>
     *
     * <code>string activation_descriptor = 18;</code>
     */
    public function getActivationDescriptor()
    {
        return $this->activation_descriptor;
    }

    /**
     * <pre>
     * Activation descriptor is displayed in UI to differentiate multiple activations of the same addon
     * </pre>
     *
     * <code>string activation_descriptor = 18;</code>
     */
    public function setActivationDescriptor($var)
    {
        GPBUtil::checkString($var, True);
        $this->activation_descriptor = $var;
    }

}

